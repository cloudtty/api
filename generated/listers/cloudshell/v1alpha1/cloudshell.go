/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cloudtty/api/cloudshell/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudShellLister helps list CloudShells.
// All objects returned here must be treated as read-only.
type CloudShellLister interface {
	// List lists all CloudShells in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudShell, err error)
	// CloudShells returns an object that can list and get CloudShells.
	CloudShells(namespace string) CloudShellNamespaceLister
	CloudShellListerExpansion
}

// cloudShellLister implements the CloudShellLister interface.
type cloudShellLister struct {
	indexer cache.Indexer
}

// NewCloudShellLister returns a new CloudShellLister.
func NewCloudShellLister(indexer cache.Indexer) CloudShellLister {
	return &cloudShellLister{indexer: indexer}
}

// List lists all CloudShells in the indexer.
func (s *cloudShellLister) List(selector labels.Selector) (ret []*v1alpha1.CloudShell, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudShell))
	})
	return ret, err
}

// CloudShells returns an object that can list and get CloudShells.
func (s *cloudShellLister) CloudShells(namespace string) CloudShellNamespaceLister {
	return cloudShellNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudShellNamespaceLister helps list and get CloudShells.
// All objects returned here must be treated as read-only.
type CloudShellNamespaceLister interface {
	// List lists all CloudShells in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudShell, err error)
	// Get retrieves the CloudShell from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CloudShell, error)
	CloudShellNamespaceListerExpansion
}

// cloudShellNamespaceLister implements the CloudShellNamespaceLister
// interface.
type cloudShellNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudShells in the indexer for a given namespace.
func (s cloudShellNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudShell, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudShell))
	})
	return ret, err
}

// Get retrieves the CloudShell from the indexer for a given namespace and name.
func (s cloudShellNamespaceLister) Get(name string) (*v1alpha1.CloudShell, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudshell"), name)
	}
	return obj.(*v1alpha1.CloudShell), nil
}
